Introducing C

### 1.1 History of C

오래 전엔 운영체제를 어셈블리 언어로 썼다. 이렇게 만든 운영체제의 문제는 디버깅과 품질 향상이 어렵다는 것이었다. 이는 UNIX 운영체제도 마찬가지였고, UNIX를 더 낫게 만들고자 Ken Thompson은 어셈블리 언어 말고 다른 언어를 만들어서 그 언어로 UNIX를 새로 짜기로 결정했다. 디버깅이나 품질 향상이 쉽도록. 이렇게 해서 나온 언어가 B다. B를 사용해서 UNIX를 다시 짜는 과정에서 잘 맞지 않는 점이 있었고, 이후 이 프로젝트에 참여한 Dennis Ritchie가 NB(New B)를 만들어 문제를 해결하고자 한다. NB는 시간이 더 지나면서 B로부터 다른 점을 많이 갖게 되면서 B에서 파생된 언어가 아닌, 별개의 언어로 보는 것이 낫겠다는 생각을 하게 했다. 그래서 이름을 C로 바꾸게 된다.

C는 UNIX 전체를 C로 다시 짤 수 있을 정도로 안정된 언어다. 이 언어는 높은 이식성을 갖는데, C로 UNIX를 새로 짰기 때문에 각 컴퓨터에 맞는 C 컴파일러를 만들면 그 컴퓨터에서도 UNIX를 돌아갈 수 있게 되어 컴퓨터의 기종에 구애받지 않고 UNIX를 쉽게 프로그래밍할 수 있는 환경이 조성되었다.

70년대까지만 해도 C 프로그래머는 상대적으로 적었는데, 그 숫자가 더 많아지면서 문제가 생겼다. Brian Kernighan과 Dennis Ritchie가 작성한 C에 대한 첫 번째 책 The C Programming Language는 일종의 표준이었다. 프로그래머들은 새 C 컴파일러를 짤 때 이 책을 참고했는데, 책에서 C의 몇 가지 특성을 혼동될 수 있도록 써놓았기 때문에 책을 참고해 짠 컴파일러가 서로 다르게 동작하곤 한 것이다. UNIX와 C를 명확히 구분하지 않고 적어놓은 부분도 문제였다. 책이 나온 이후 C의 어떤 기능은 추가되었고, 어떤 기능은 없어졌다. 언어의 변화가 우후죽순 식으로 생겨나는 데 대해 대책을 세우지 않는다면 C의 이식성을 보장할 수 없을 것이었다.

언어에 대한 명세를 정확히 해서 표준을 만들어야 했다. 표준을 정하는 과정 끝에 나온 것이 1989년 American National Standards Institute 표준이다. 이후 1995년에 몇 가지 변화가 생겼고, 1999년에 새로운 표준이 나오게 되었다. 비록 C99가 새로운 표준이지만, 그 전까지 C89에 맞춰 쓴 (엄청나게 많은) 코드들을 이해해서 이용하려면 전에 나온 명세 역시 알 필요가 있다.

C 언어를 기초로 만들어진 여러 언어가 있다. C++, Java, C#, Perl 등이 있는데, 이런 언어를 바로 배우지 않고 C를 먼저 배우는 장점이 있을까? C를 이해하는 건 이 언어들의 기본적인 특성 중 C로부터 유래된 특성들을 이해하는 데 도움이 된다. C로 쓰인 프로그램이 많기 때문에, 이 프로그램 소스를 읽고 유지보수할 필요가 생길 수 있다. 또 메모리나 연산 능력이 제한된 환경에서 프로그램을 짜야 할 경우 C가 필요할 수 있다.

### 1.2 Strengths and Weaknesses of C

C를 이루는 철학으로부터 이 언어의 장점뿐 아니라 단점도 나온다. 이 언어의 철학은 다음과 같다.

- 시스템 프로그래밍을 염두에 두고 만들었기 때문에 기계가 동작하는 개념에 접근할 수 있도록 해준다. 이 때문에 C로 만들어진 프로그램은 빠르다.
- 크기가 작다. 이 특징을 유지하기 위해 대부분의 함수를 라이브러리에 쟁여두고 필요한 것만 불러 쓸 수 있도록 한다.
- 프로그래머 자신이 뭘 하고 있는지 알고 프로그램을 짠다고 여기기 때문에 다른 언어보다 제어할 수 있는 폭이 더 넓다.

이에 따른 장점

- 효율적이다. 어셈블리 언어를 대체할 목적으로 만들었기 때문에 동작이 빠르고 제한된 메모리를 갖고서도 돌아간다.
- 이식성이 좋다. C 컴파일러는 작고 쉽게(?) 쓸 수 있기 때문에 PC 부터 슈퍼 컴퓨터까지 다양한 컴퓨터에 이식하기 좋다. C 언어 자체에도 이식을 좀 더 편하게 도와주는 특성이 있다.
- 자료 구조와 연산자가 다양하다. 짧은 코드 안에 많은 내용을 담을 수 있다.
- 시스템 프로그래밍을 염두에 두고 만들었지만, 다른 분야에서도 제한 없이 쓰일 정도로 유연한 언어다.

같은 이유 (C가 기계 개념과 가까이 있다는) 에서 오는 단점

- 유연하지만, 그만큼 오류를 내기 쉽다.
- 다른 언어에는 없는 특징이 있고, 때문에 익숙하지 않은 사람들이 코드를 이해하기 어렵게 한다. 만들어질 당시 프로그램 짜는 환경이 지금만큼 편하지 않았기 때문에 C 언어는 최대한 짧게 프로그램을 짤 수 있게 만들었는데, 짧게 짜여진 코드 중에는 이해하기 어렵거나 오래 걸리는 경우가 많이 있다.
- 규모가 큰 프로그램을 만들 때 관리가 편하도록 부분으로 나눌 수 있게 하는 장치가 최근 만들어진 언어에는 마련되어 있는 반면, C는 이런 장치가 없기 때문에 프로그램을 짜는 처음부터 이 점을 고민하지 않으면 다 짠 이후 관리가 어렵다.

C를 효율적으로 사용하려면

- 어떻게 하면 C pitfall을 피할 수 있을지를 배워야 한다
- 컴파일러에서 잡아주지 않거나 어렵게 설명하는 점들에 대한 보완을 위해 추가로 도구를 사용해야 한다 (디버거, lint 등)
- (다른 C 프로그래머들이 만들어놓은) 이미 있는 코드 라이브러리를 활용하는 것이 좋다
- 코딩 스타일을 정하고 일정하게 유지하는 것이 좋다
- C 프로그래머들은 코드를 되도록 짧게 만들려는 경향이 있다. 하지만 다른 사람이 이해하기 쉽게 만드는 것이 중요하다. 짧되, 이해하기 편한 코드를 짜자.
- 이식할 경우를 대비해, 꼭 필요한 경우가 아니라면 표준이 아닌 기능이나 라이브러리는 사용하지 않는 편이 낫다
